# Imports
from utils import *


# Arguments
ARGUMENTS["platform_type"] = ARGUMENTS.get("platform_type", "Server")
ARGUMENTS["build_type"] = ARGUMENTS.get("build_type", "Debug")


# Environments
cwd = os.path.abspath(os.getcwd())
platform = sys.platform
env = Environment(tools=["default", "msvc"], PLATFORM="")
env.BuildConan(ARGUMENTS["build_type"])
env.MergeFlags(SConscript(".conan/SConscript_conandeps")["conandeps"])
env.sources = (
    env.RGlob("Type", "*.cpp") + 
    env.RGlob("System", "*.cpp") + 
    env.RGlob("Sandbox", "*.cpp") + 
    env.RGlob("Vendor", "*.cpp") + 
    env.RGlob("Vendor", "*.c") + 
    env.RGlob("Vendor", "*.cc")
)
env.Append(CPPPATH=[
    cwd,
    os.path.join(cwd, "Type"),
    os.path.join(cwd, "System"),
    os.path.join(cwd, "Sandbox"),
    os.path.join(cwd, "Vendor"),
    os.path.join(cwd, "Vendor/fmt"),
    os.path.join(cwd, "Vendor/rapidjson"),
    os.path.join(cwd, "Vendor/lua"),
    os.path.join(cwd, "Vendor/duktape")
])


# Flags
if ARGUMENTS["platform_type"] == "Client":
    env.Append(CPPFLAGS=["-DVital_SDK_Client"])


# Dependencies
if platform.startswith("win"):
    env.Append(CPPFLAGS=["-DVital_SDK_WINDOWS"])
    env.Append(LIBS=["ws2_32", "winmm", "wbemuuid"])
elif platform == "darwin":
    env.Append(CPPFLAGS=["-DVital_SDK_MACOS"])
    env.Append(CPPDEFINES=["LUA_USE_MACOSX", "DUK_F_APPLE"])
elif platform.startswith("ios"):
    env.Append(CPPFLAGS=["-DVital_SDK_IOS"])
    env.Append(CPPDEFINES=["LUA_USE_IOS", "DUK_F_APPLE"])
elif platform.startswith("linux"):
    env.Append(CPPFLAGS=["-DVital_SDK_LINUX"])
    env.Append(CPPDEFINES=["LUA_USE_LINUX", "DUK_F_LINUX"])
elif platform.startswith("android"):
    env.Append(CPPFLAGS=["-DVital_SDK_ANDROID"])
    env.Append(CPPDEFINES=["LUA_USE_LINUX", "DUK_F_ANDROID"])
elif platform.startswith("web"):
    env.Append(CPPFLAGS=["-DVital_SDK_WEB"])
    env.Append(CPPDEFINES=["LUA_USE_POSIX", "DUK_F_POSIX"])


# Returns
Return("env")