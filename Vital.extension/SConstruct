# Imports
import sys
sys.path.append('../Vital.sandbox')
from utils import *


# Metadatas
name = "vital.sdk"
ARGUMENTS["target"] = f'template_{ARGUMENTS["build_type"].lower()}' 


# Environments
cwd = os.path.abspath(os.getcwd())
env = SConscript("../Vital.sandbox/SConstruct")
env = SConscript("Vendor/godot/SConstruct", {"env": env.Clone()})
env.Append(LINKFLAGS=['/NODEFAULTLIB:LIBCMTD'])
env.sources += (
    env.RGlob('Engine', '*.cpp') + 
    env.RGlob('Engine', '*.c') + 
    env.RGlob('Sandbox', '*.cpp') + 
    env.RGlob('Sandbox', '*.c')
)
env.Append(CPPPATH=[
    cwd,
    os.path.join(cwd, "../../Vital.sandbox"),
    os.path.join(cwd, "Engine"),
    os.path.join(cwd, "Sandbox"),
    os.path.join(cwd, "Vendor")
])


# Builds
build_dir = ".build/{}".format(name)
build = env.SharedLibrary(
    ".bin/{}/{}".format(env['platform'], "{}{}{}{}".format(env.subst('$SHLIBPREFIX'), name, env["suffix"].replace(".dev", "").replace(".universal", ""), env.subst('$SHLIBSUFFIX'))),
    source = env.sources
)
Default(*[build, env.Install("{}/{}/".format(build_dir, env["platform"]), build)])